version: '3'
services:
  mysql-order:
    container_name: mysql-order
    image: mysql
    environment:
      MYSQL_DATABASE: order_service
      MYSQL_ROOT_PASSWORD: orders_pass
      MYSQL_USER: orders_user
      MYSQL_PASSWORD: orders_pass
    volumes:
      - mysql_order_data:/var/lib/mysql
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-porders_pass", "--silent"]
      timeout: 10s
      retries: 10
    networks: [msnet]

  mysql-inventory:
    container_name: mysql-inventory
    image: mysql
    environment:
      MYSQL_DATABASE: inventory_service
      MYSQL_ROOT_PASSWORD: inventory_pass
      MYSQL_USER: inventory_user
      MYSQL_PASSWORD: inventory_pass
    volumes:
      - mysql_inventory_data:/var/lib/mysql
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-pinventory_pass", "--silent" ]
      timeout: 10s
      retries: 10
    networks: [msnet]



  keycloak-postgres:
    image: postgres:latest
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "keycloak" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [msnet]

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.3.4
    command: [ "start-dev"]
    environment:

      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      keycloak-postgres: { condition: service_healthy }
    networks: [msnet]

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: [msnet]

  broker:
    image: confluentinc/cp-kafka:7.2.15
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks: [msnet]
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks: [msnet]
  api-gateway:
    image:  api-gateway:0.0.1-SNAPSHOT
    container_name: api-gateway
    ports:
      - "8181:8181"
    environment:
      SERVER_PORT: 8181
      SPRING_PROFILES_ACTIVE: docker
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:password@discovery-server:8761/eureka
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/master
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: "1.0"
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans

    depends_on:
      - zipkin
      - discovery-server
      - keycloak
    networks: [msnet]

  discovery-server:
    image: discovery-server:0.0.1-SNAPSHOT
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8761
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: "1.0"
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD","wget","-qO-", "http://localhost:8761/"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      - zipkin
    networks: [msnet]

  order-service:
    image:  order-service:1.0-SNAPSHOT
    environment:
      SERVER_PORT: 8081
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:password@discovery-server:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-order:3306/order_service?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: orders_user
      SPRING_DATASOURCE_PASSWORD: orders_pass
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: "1.0"
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092

    depends_on:
      - discovery-server
      - broker
      - mysql-order
      - zipkin
      - api-gateway


    ports:
      - "8081:8081"
    networks: [msnet]

  notification-service:
    image: notification-service:0.0.1-SNAPSHOT
    environment:
      SERVER_PORT: 8083
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:password@discovery-server:8761/eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: "1.0"
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
    ports:
      - "8083:8083"
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway
    networks: [msnet]

  inventory-service:
    image: inventory-service:1.0-SNAPSHOT
    environment:
      SERVER_PORT: 8082
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:password@discovery-server:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-inventory:3306/inventory_service?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: inventory_user
      SPRING_DATASOURCE_PASSWORD: inventory_pass
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: "1.0"
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092

    depends_on:
      discovery-server: { condition: service_started }
      mysql-inventory: { condition: service_healthy }
      api-gateway: { condition: service_started}
      zipkin: { condition: service_started }
    ports:
      - "8082:8082"
    networks: [msnet]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - inventory-service
      - order-service
      - notification-service
    networks: [msnet]

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    depends_on:
      - prometheus
    networks: [msnet]

volumes:
  mysql_order_data: {}
  mysql_inventory_data: {}
  postgres_data: {}
  prometheus_data: { }
  grafana_data: { }

networks:
  msnet:
